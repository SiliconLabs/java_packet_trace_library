plugins {
  id 'application'
  id 'java'
}

repositories {
  mavenCentral()
}

java {
  withJavadocJar()
  withSourcesJar()
}

project.ext.set('archiveName', 'silabs-pti-lib')
project.ext.set('fatArchiveName', 'silabs-pti')
project.ext.set('silabsPtiVersion', file('VERSION').text.trim())
project.ext.set('buildDate', new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())) 
project.ext.set('mainClass', 'com.silabs.pti.Main')

javadocJar {
  archiveBaseName = project.archiveName
  archiveVersion = project.silabsPtiVersion
}

sourcesJar {
  archiveBaseName = project.archiveName
  archiveVersion = project.silabsPtiVersion
}

jar {
  archiveBaseName = project.archiveName
  archiveVersion = project.silabsPtiVersion
  manifest {
    attributes(
      'Built-By'       : System.properties['user.name'],
      'Build-Timestamp': project.buildDate,
      'Created-By'     : "Gradle ${gradle.gradleVersion}",
      'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
      'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
      'Main-Class'     : project.mainClass
    )
  }
}

task createBuildStamp() {
  doLast {
    def gitOutput = 'git log -1 --format=hash=%H%ndate=%cI'.execute().text
    file('src/main/resources/build.stamp').text = """version=${project.silabsPtiVersion}
${gitOutput}"""
    project.logger.lifecycle('Created build.stamp.')
  }
}
tasks.processResources.dependsOn << 'createBuildStamp'

task fatJar(type: Jar) {
  archiveBaseName = project.fatArchiveName
  archiveVersion = project.silabsPtiVersion
  manifest {
    attributes(
      'Built-By'       : System.properties['user.name'],
      'Build-Timestamp': project.buildDate,
      'Created-By'     : "Gradle ${gradle.gradleVersion}",
      'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
      'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
      'Main-Class'     : project.mainClass
    )
  }
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
  with jar
}
dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
  implementation 'org.apache.mina:mina-core:2.1.4'
  implementation 'org.slf4j:slf4j-simple:1.7.26'    
}


application {
  mainClass = project.mainClass
}

tasks.named('test') {
  useJUnitPlatform()
}

tasks.register('all') {
  dependsOn createBuildStamp,jar,javadocJar,sourcesJar,fatJar
}