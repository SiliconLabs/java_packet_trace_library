import java.nio.file.Paths

plugins {
  id 'application'
  id 'java'
}

project.ext.set('archiveName', 'silabs-pti-lib')
project.ext.set('fatArchiveName', 'silabs-pti')
project.ext.set('silabsPtiVersion', file('VERSION').text.trim())
project.ext.set('buildDate', new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())) 
project.ext.set('mainClass', 'com.silabs.pti.Main')
project.ext.set('manifestMap', [
      'Built-By'       : System.properties['user.name'],
      'Build-Timestamp': project.buildDate,
      'Created-By'     : "Gradle ${gradle.gradleVersion}",
      'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
      'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
      'Main-Class'     : project.mainClass
    ])
project.ext.set('wsExtcapDir', '.config/wireshark/extcap')

repositories {
  mavenCentral()
}

java {
  withJavadocJar()
  withSourcesJar()
}

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
  implementation 'org.apache.mina:mina-core:2.1.4'
  implementation 'org.slf4j:slf4j-simple:1.7.26'    
  implementation files('../external/java-pcap.jar')
}

test {
    useJUnitPlatform()
}

javadocJar {
  archiveBaseName = project.archiveName
  archiveVersion = project.silabsPtiVersion
}

sourcesJar {
  archiveBaseName = project.archiveName
  archiveVersion = project.silabsPtiVersion
}

jar {
  archiveBaseName = project.archiveName
  archiveVersion = project.silabsPtiVersion
  manifest {
    attributes(project.manifestMap)
  }
}

task createDebugMessageTypes() {
  doLast {
    // First we read json
    def slurper = new groovy.json.JsonSlurper()
    def json = slurper.parseText(file("debug-message-type.json").text)
    project.logger.lifecycle("Processing debug messages, feature level ${json.featureLevel}, date ${json.date}")
    
    // Now we output generated files
    def javaprops = file("src/main/resources/debugMessageType.properties")
    def javaenum = file("src/main/java/com/silabs/pti/debugchannel/DebugMessageType.java")
    def cenum = file("debug-message-type-gen.h")
    
    // Sort the types
    def sortedTypes = json.types.sort { a,b -> a.getValue().code <=> b.getValue().code }
    
    // Write props
    project.logger.lifecycle("Write ${javaprops}")
    def text = "# !!!! This file is generated via 'gradle createDebugMessageTypes' command. Please do not edit manually!!!!!\n\n"
    sortedTypes.each {
      t ->
        text += "${t.getKey()}.long=${t.getValue().longDescription}\n"
        text += "${t.getKey()}=${t.getValue().shortDescription}\n"
    }
    javaprops.text = text
    
    // Write enum
    text = """/*******************************************************************************
 * # License
 * Copyright 2022 Silicon Laboratories Inc. www.silabs.com
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 ******************************************************************************/
    
    """
    text = text + "\n// !!!! This file is generated via 'gradle createDebugMessageTypes' command. Please do not edit manually!!!!!\n\n"
    text = text + """
package com.silabs.pti.debugchannel;

import java.util.ResourceBundle;

public enum DebugMessageType {
"""
    sortedTypes.each {
      t ->
        text += "  ${t.getKey()}(${t.getValue().code}),\n"
    }
    text = text + """
  INVALID(-1);

  private final int value;
  private static final String BUNDLE_NAME = "debugMessageType";
  private static final ResourceBundle names = ResourceBundle.getBundle(BUNDLE_NAME);

  private DebugMessageType(final int value) {
    this.value = value;
  }

  /** Returns the integer value of this debug message type */
  public int value() {
    return value;
  }

  /** Returns human-readable description of the debug message type, 10 char max */
  public String description() {
    try {
      return names.getString(name());
    } catch (Exception e) {
      return name().toLowerCase();
    }
  }

  /** Returns human-readable long description of the debug message type */
  public String longDescription() {
    try {
      return names.getString(name() + ".long");
    } catch (Exception e) {
      return description();
    }
  }

  /**
   * Finds the debug message type that matches value or INVALID if the value is
   * not valid debug message type.
   */
  public static DebugMessageType get(final int value) {
    DebugMessageType[] values = values();
    int low = 0;
    int high = values.length - 1;
    while (low <= high) {
      int mid = (low + high) >>> 1;
      DebugMessageType dmt = values[mid];
      if (dmt.value() == value) {
        return dmt;
      } else if (dmt.value() > value) {
        high = mid - 1;
      } else {
        low = mid + 1;
      }
    }
    return DebugMessageType.INVALID;
  } 
"""
    text = text + "\n  public static int featureLevel() { return ${json.featureLevel}; }\n"
    text = text + "\n  public static String featureDate() { return \"${json.featureDate}\"; }\n"
    text = text + "\n}"
    project.logger.lifecycle("Write ${javaenum}")
    javaenum.text = text

    // Write C enum
    project.logger.lifecycle("Write ${cenum}")
    text = """// (c) Silicon Laboratories, Inc., 2012, 2022
//
// !!!! This file is generated via 'gradle createDebugMessageTypes' command inside 
// the public repo https://github.com/SiliconLabs/java_packet_trace_library
//
// Please do not edit manually!!!!!\n
#ifndef __SL_DEBUG_MESSAGE_TYPES__
#define __SL_DEBUG_MESSAGE_TYPES__
#include <stdint.h>

// Enum of all known debug message types.
enum {
"""
    // Generate properly named enums.
    sortedTypes.each {
      t ->
        def prefix = "SL_DEBUG_MESSAGE_TYPE"
        text += "  ${prefix}_${t.getKey()} = ${t.getValue().code.startsWith("0xF")?"(int16_t)":""}${t.getValue().code},\n"
    }
    
    text = text + """
};

// Enum with legacy names for the same type, for backwards compatibility.
enum {
"""
    // these are for backwards compatibility, with the EM_ prefix.
    sortedTypes.each {
      t ->
        def prefix = "EM_DEBUG"
        if ( t.getKey().startsWith("PACKET_TRACE_") ||  t.getKey().startsWith("FLASH_") 
             ||  t.getKey().startsWith("EEPROM_") ||  t.getKey().startsWith("RAM_")
             ||  t.getKey().startsWith("SIMULATED_") ||  t.getKey().startsWith("AEM_")||  t.getKey().startsWith("CPU_")) {
          prefix = "EM"
        }
        text += "  ${prefix}_${t.getKey()}=${t.getValue().code.startsWith("0xF")?"(int16_t)":""}${t.getValue().code},\n"
    }

    text = text + "};\n\n#define SL_DEBUG_MESSAGE_TYPE_FEATURE_LEVEL (${json.featureLevel})\n\n#endif // SL_DEBUG_MESSAGE_TYPES\n"
    cenum.text = text

  }
}

task createBuildStamp() {
  doLast {
    def gitOutput = 'git log -1 --format=hash=%H%ndate=%cI'.execute().text
    file('src/main/resources/build_pti.stamp').text = """version=${project.silabsPtiVersion}
${gitOutput}"""
    project.logger.lifecycle('Created build_pti.stamp.')
  }
}
tasks.processResources.dependsOn << 'createBuildStamp'

task fatJar(type: Jar) {
  description 'Build a self-contained fat jar that includes all dependencies.'
  archiveBaseName = project.fatArchiveName
  archiveVersion = project.silabsPtiVersion
  manifest {
    attributes(project.manifestMap)
  }
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
  with jar
}


application {
  mainClass = project.mainClass
}

task all {
  description 'Toplevel task that creates everything.'
  dependsOn createBuildStamp,createDebugMessageTypes,jar,javadocJar,sourcesJar,fatJar
}

task wireshark {
  description 'Setup flow to tie this library with the wireshark extcap mechanism.'
  dependsOn all
  doLast {
    project.logger.lifecycle("Locating wireshark extcap directory....")
    def dir = file(Paths.get(System.getProperty('user.home')).resolve(project.wsExtcapDir))
    def ptiJar = file(Paths.get(file('.').toString()).resolve("build/libs/silabs-pti-${project.silabsPtiVersion}.jar"))
    def script = "#!/usr/bin/env bash\nexport EXTCAP_LOC=\"${dir}\"\njava -jar ${ptiJar} extcap \$@\n"
    if ( dir.exists() ) {
      def extCapFile = file(Paths.get(dir.toString()).resolve('silabs-pti'))
      project.logger.lifecycle("Found ${dir}.")
      project.logger.lifecycle("Creating ${extCapFile} for use with ${ptiJar}")
      extCapFile.text = script
      "chmod 755 ${extCapFile.toString()}".execute()
    } else {
      project.logger.lifecycle("""Not found ${dir}!
      
Please locate the 'extcap' directory of wireshark. You can do that by executing wireshark, go to "Help->About" and look under the "Folders" tab on the about dialog.
Once you locate the directory, please copy the following script into that directory, name it silabs-pti and make sure it has "execute" permission.

---------- SCRIPT START ---------- 
${script}
---------- SCRIPT END ---------- 
      """)
    }
  }
}

